/**
* Copyright 2025 RetoraDev
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*   you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*   limitations under the License.
*/

(function(global,factory){if(typeof module==="object"&&typeof module.exports==="object"){module.exports=factory()}else{global.LORE=factory()}})(typeof window!=="undefined"?window:this,function(){"use strict";const ANSI_COLORS={black:"\x1b[30m",red:"\x1b[31m",green:"\x1b[32m",yellow:"\x1b[33m",blue:"\x1b[34m",magenta:"\x1b[35m",cyan:"\x1b[36m",white:"\x1b[37m",reset:"\x1b[0m"};const ANSI_STYLES={reset:"\x1b[0m",bold:"\x1b[1m",thick:"\x1b[1m",strong:"\x1b[1m",b:"\x1b[1m",italic:"\x1b[3m",cursive:"\x1b[3m",i:"\x1b[3m",underline:"\x1b[4m",u:"\x1b[4m",blink:"\x1b[5m",inverse:"\x1b[7m",hidden:"\x1b[8m"};const VERSION="1.0.0";const STORAGE_KEY="lore_save_data";const DEFAULT_PROMPT=">";const DEFAULT_THEME={"--lore-bg-color":"#000000","--lore-text-color":"#ffffff","--lore-prompt-color":"#00ff00","--lore-input-color":"#ffffff","--lore-font-family":"monospace","--lore-font-size":"16px","--lore-border-color":"#333333"};const DEFAULT_CONFIG={prompt:DEFAULT_PROMPT,autosave:false,typingSpeed:30,debug:false,clearScreenOnNovelLoad:true,disableTextAnimation:false};const Utils={isBrowser:typeof window!=="undefined"&&typeof document!=="undefined",isNode:typeof process!=="undefined"&&process.versions&&process.versions.node,deepClone(obj){return{...obj}},uuid(){return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(c){const r=(Math.random()*16)|0;const v=c==="x"?r:(r&0x3)|0x8;return v.toString(16)})},debounce(func,wait){let timeout;return function executedFunction(...args){const later=()=>{clearTimeout(timeout);func(...args)};clearTimeout(timeout);timeout=setTimeout(later,wait)}},colorNameToHex(color){const colors={black:"#000000",red:"#ff0000",green:"#00ff00",yellow:"#ffff00",blue:"#0000ff",magenta:"#ff00ff",cyan:"#00ffff",white:"#ffffff"};return colors[color.toLowerCase()]||color},isValidColor(color){if(!color)return false;const namedColors=["black","red","green","yellow","blue","magenta","cyan","white"];if(namedColors.includes(color.toLowerCase()))return true;return/^#?([0-9A-F]{3}){1,2}$/i.test(color)},isURL(value){return value.startsWith("file:},deserializeFunction(func){if(typeof func==="string"){return new Function(`const state=arguments[0];const engine=arguments[1];${func}`)}else{return func}},async loadModule(url){try{const response=await fetch(url);const content=await response.text();if(!response.ok){console.error("File at",url,"not found!");return{}}const module=new Function(` const module={exports:{}};try{${content}}catch(error){return module;throw error}return module;`)();return module.exports}catch(error){console.error("Error loading module from ",url,error);return{}}}};class Game{constructor(options={}){this.state={currentRoom:null,inventory:[],flags:{},variables:{},history:[],gameTime:0};this.config={...DEFAULT_CONFIG,...options};this.world={rooms:new Map(),items:new Map(),characters:new Map(),events:new Map(),commands:new Map(),keybindings:new Map()};this.plugins=new Map();this.theme={...DEFAULT_THEME};this.historyIndex=-1;this.queueIsRunning=false;this.isRunning=false;this.outputQueue=[];this.outputBuffer=[];this.animationFrames=new Map();this.animationIntervals=new Map();this.formattingState={color:null,bold:false,italic:false,underline:false};this.animationState={isAnimating:false,currentAnimation:null};if(Utils.isBrowser){this.initBrowser()}else if(Utils.isNode){this.initNode()}this.registerDefaultCommands()}initBrowser(){this.env="browser";this.terminalElement=document.createElement("div");this.terminalElement.className="lore-terminal";this.terminalElement.style.cssText=` position:fixed;top:0;left:0;width:100%;height:100%;background-color:${this.theme["--lore-bg-color"]};color:${this.theme["--lore-text-color"]};font-family:${this.theme["--lore-font-family"]};font-size:${this.theme["--lore-font-size"]};overflow:auto;padding:20px;box-sizing:border-box;`;this.outputElement=document.createElement("div");this.outputElement.className="lore-output";this.outputElement.style.cssText=` height:calc(100%-60px);overflow-y:auto;margin-bottom:20px;white-space:pre-wrap;`;this.inputContainer=document.createElement("div");this.inputContainer.className="lore-input-container";this.inputContainer.style.cssText=` display:flex;align-items:center;background:transparent;`;this.promptElement=document.createElement("span");this.promptElement.className="lore-prompt";this.promptElement.textContent=this.parseFormatting(this.config.prompt);this.inputElement=document.createElement("input");this.inputElement.className="lore-input";this.inputElement.type="text";this.inputElement.style.cssText=` flex:1;background:transparent;border:none;outline:none;color:${this.theme["--lore-input-color"]};font-family:${this.theme["--lore-font-family"]};font-size:${this.theme["--lore-font-size"]};margin-left:5px;`;this.inputContainer.appendChild(this.promptElement);this.inputContainer.appendChild(this.inputElement);this.terminalElement.appendChild(this.outputElement);this.terminalElement.appendChild(this.inputContainer);if(!document.querySelector(".lore-terminal")){document.body.appendChild(this.terminalElement);document.body.style.margin="0";document.body.style.padding="0"}this.setupBrowserEvents()}initNode(){this.env="node";this.readline=require("readline");this.fs=require("fs");this.path=require("path");this.rl=this.readline.createInterface({input:process.stdin,output:process.stdout,prompt:this.parseFormatting(this.config.prompt)});this.setupNodeEvents()}setupBrowserEvents(){this.inputElement.addEventListener('keydown',(e)=>{if(e.key==='Enter'){if(!this.animationState.isAnimating){this.processInput(this.inputElement.value);this.inputElement.value='';e.preventDefault()}else{this.skipAnimation();e.preventDefault()}}else if(e.key==='ArrowUp'){this.navigateHistory(-1);e.preventDefault()}else if(e.key==='ArrowDown'){this.navigateHistory(1);e.preventDefault()}else if(e.key==='Tab'){this.autoComplete();e.preventDefault()}else if(e.key==='Escape'&&this.animationState.isAnimating){this.skipAnimation();e.preventDefault()}});window.addEventListener('resize',Utils.debounce(()=>{this.outputElement.scrollTop=this.outputElement.scrollHeight},250));this.terminalElement.addEventListener('click',()=>{this.inputElement.focus()})}setupNodeEvents(){this.rl.on('line',(input)=>{if(this.animationState.isAnimating){this.skipAnimation();this.rl.prompt()}else{this.processInput(input);this.rl.prompt()}}).on('close',()=>{process.exit(0)});this.rl.on('SIGINT',()=>{if(this.animationState.isAnimating){this.skipAnimation();this.rl.prompt()}else{this.rl.question('Are you sure you want to exit?(y/n)',(answer)=>{if(answer.match(/^y(es)?$/i)){this.rl.close()}else{this.rl.prompt()}})}})}parseFormatting(text){if(this.env==='browser'){return this.parseFormattingBrowser(text)}else{return this.parseFormattingNode(text)}}parseFormattingBrowser(text){const formatRegex=/\{\{([^}]+)\}\}/g;let lastIndex=0;let result='';let match;this.formattingState={color:null,bold:false,italic:false,underline:false};while((match=formatRegex.exec(text))!==null){result+=text.substring(lastIndex,match.index);lastIndex=match.index+match[0].length;const tag=match[1].trim().toLowerCase();if(tag==='font_reset'||tag==='fr'){result+='</span>';this.formattingState={color:null,bold:false,italic:false,underline:false}}else if(tag==='color_reset'){if(this.formattingState.color){result+='</span>';this.formattingState.color=null}}else if(Utils.isValidColor(tag)){if(this.formattingState.color){result+='</span>'}const color=Utils.colorNameToHex(tag.replace('#',''));result+=`<span style="color:${color}">`;this.formattingState.color=color}else if(tag==='bold'||tag==='thick'||tag==='strong'||tag==='b'){if(!this.formattingState.bold){result+='<strong>';this.formattingState.bold=true}}else if(tag==='italic'||tag==='cursive'||tag==='i'){if(!this.formattingState.italic){result+='<em>';this.formattingState.italic=true}}else if(tag==='underline'||tag==='u'){if(!this.formattingState.underline){result+='<span style="text-decoration:underline">';this.formattingState.underline=true}}else if(tag==='newline'||tag==='n'){result+='<br>'}else if(tag==='tabulator'||tag==='tab'||tag==='t'){result+='&nbsp;&nbsp;&nbsp;&nbsp;'}else if(tag==='instant'){result+=''}}result+=text.substring(lastIndex);if(this.formattingState.underline)result+='</span>';if(this.formattingState.italic)result+='</em>';if(this.formattingState.bold)result+='</strong>';if(this.formattingState.color)result+='</span>';return result}parseFormattingNode(text){const formatRegex=/\{\{([^}]+)\}\}/g;let lastIndex=0;let result='';let match;this.formattingState={color:null,bold:false,italic:false,underline:false};while((match=formatRegex.exec(text))!==null){result+=text.substring(lastIndex,match.index);lastIndex=match.index+match[0].length;const tag=match[1].trim().toLowerCase();if(tag==='font_reset'||tag==='fr'){result+=ANSI_STYLES.reset;this.formattingState={color:null,bold:false,italic:false,underline:false}}else if(tag==='color_reset'){if(this.formattingState.color||this.formattingState.bold||this.formattingState.italic||this.formattingState.underline){result+=ANSI_STYLES.reset;this.formattingState={color:null,bold:false,italic:false,underline:false}}}else if(Utils.isValidColor(tag)){const colorName=tag.replace('#','');if(ANSI_COLORS[colorName]){result+=ANSI_COLORS[colorName];this.formattingState.color=colorName}}else if(tag==='bold'||tag==='thick'||tag==='strong'||tag==='b'){if(!this.formattingState.bold){result+=ANSI_STYLES.bold;this.formattingState.bold=true}}else if(tag==='italic'||tag==='cursive'||tag==='i'){if(!this.formattingState.italic){result+=ANSI_STYLES.italic;this.formattingState.italic=true}}else if(tag==='underline'||tag==='u'){if(!this.formattingState.underline){result+=ANSI_STYLES.underline;this.formattingState.underline=true}}else if(tag==='newline'||tag==='n'){result+='\n'}else if(tag==='tabulator'||tag==='tab'||tag==='t'){result+='\t'}else if(tag==='instant'){result+=''}}result+=text.substring(lastIndex);if(this.formattingState.color||this.formattingState.bold||this.formattingState.italic||this.formattingState.underline){result+=ANSI_STYLES.reset}return result}processInput(input){if(!input.trim())return;if(this.animationState.currentAnimation||this.queueIsRunning){this.skipAnimation();return}this.state.history.push(input);this.historyIndex=this.state.history.length;if(this.env==='browser'){this.printLine(`${this.config.prompt}${input}`,true)}const[command,...args]=input.trim().split(/\s+/);const normalizedCommand=command.toLowerCase();if(this.world.commands.has(normalizedCommand)){try{const command=this.world.commands.get(normalizedCommand);command?.fn?.call(this,args,this)}catch(error){this.printLine(`Error executing command:${error.message}`);if(this.config.debug){console.error(error)}}}else{this.printLine(`Unknown command:${command}. Type 'help' for available commands.`)}if(this.config.autosave){this.saveGame('autosave',true)}}navigateHistory(direction){if(this.state.history.length===0)return;this.historyIndex+=direction;if(this.historyIndex<0){this.historyIndex=0}else if(this.historyIndex>=this.state.history.length){this.historyIndex=this.state.history.length;this.inputElement.value="";return}this.inputElement.value=this.state.history[this.historyIndex]}autoComplete(){const input=this.inputElement.value.trim();if(!input)return;const inputParts=input.split(" ");const currentWord=inputParts[inputParts.length-1].toLowerCase();const matches=[];for(const[command]of this.world.commands){if(command.startsWith(currentWord)){matches.push(command)}}for(const itemId of this.state.inventory){const item=this.world.items.get(itemId);if(item&&item.name.toLowerCase().startsWith(currentWord)){matches.push(item.name.toLowerCase())}}const currentRoom=this.world.rooms.get(this.state.currentRoom);if(currentRoom){for(const itemId of currentRoom.items||[]){const item=this.world.items.get(itemId);if(item&&item.name.toLowerCase().startsWith(currentWord)){matches.push(item.name.toLowerCase())}}for(const exit of Object.keys(currentRoom.exits||{})){if(exit.toLowerCase().startsWith(currentWord)){matches.push(exit.toLowerCase())}}}if(matches.length===1){inputParts[inputParts.length-1]=matches[0];this.inputElement.value=inputParts.join(" ")}else if(matches.length>1){const commonPrefix=this.findCommonPrefix(matches);if(commonPrefix.length>currentWord.length){inputParts[inputParts.length-1]=commonPrefix;this.inputElement.value=inputParts.join(" ")}this.printLine("Suggestions:"+matches.join(","))}}findCommonPrefix(strings){if(strings.length===0)return "";let prefix=strings[0];for(let i=1;i<strings.length;i++){while(strings[i].indexOf(prefix)!==0){prefix=prefix.substring(0,prefix.length-1);if(prefix==="")return ""}}return prefix}processOutputQueue(){if(this.outputQueue.length===0){this.queueIsRunning=false;if(this.env==="node"){this.rl.prompt()}return}this.queueIsRunning=true;const nextItem=this.outputQueue.shift();if(this.config.disableTextAnimation||nextItem.instant){if(nextItem.img){this.printImageInstantly(nextItem.text,nextItem.callback)}else{this.printInstantly(nextItem.text,nextItem.callback)}}else{if(nextItem.img){this.animateImage(nextItem.text,nextItem.callback);this.animationState.isAnimating=true}else{this.animateText(nextItem.text,nextItem.callback);this.animationState.isAnimating=true}}}print(text,instant=false,img=false){return new Promise((resolve,reject)=>{this.outputQueue.push({text,instant,img,callback:()=>resolve()});if(!this.queueIsRunning){this.processOutputQueue()}})}printLine(text='',instant=false){return this.print(text+(this.env==='browser'?'<br>':'\n'),instant)}printImg(text,instant=false){return this.print(text,instant,true)}clearScreen(){if(this.env==="browser"){this.outputElement.innerHTML=""}else{process.stdout.write("\x1B[2J\x1B[0f")}}animateText(text,callback){let index=0;let instantMode=false;let outputText='';let tagStack=[];if(this.env==='browser'){const div=document.createElement('div');this.outputElement.appendChild(div);this.animationState.currentAnimation=setInterval(()=>{if(index>=text.length){clearInterval(this.animationState.currentAnimation);this.animationState.currentAnimation=null;this.animationState.isAnimating=false;if(callback)callback();this.processOutputQueue();return}if(text.substring(index,index+11)==='{{instant}}'){instantMode=true;index+=11;tagStack.push('instant');return}if(text.substring(index,index+13)==='{{/instant}}'){if(tagStack[tagStack.length-1]==='instant'){tagStack.pop();instantMode=tagStack.includes('instant')}index+=13;return}if(text.charAt(index)==='{'&&text.charAt(index+1)==='{'){const tagEnd=text.indexOf('}}',index);if(tagEnd!==-1){const tag=text.substring(index+2,tagEnd).trim().toLowerCase();if(tag==='font_reset'||tag==='fr'){outputText+='</span>'}else if(tag==='color_reset'){outputText+='</span>'}else if(Utils.isValidColor(tag)){const color=Utils.colorNameToHex(tag.replace('#',''));outputText+=`<span style="color:${color}">`}else if(tag==='bold'||tag==='thick'||tag==='strong'||tag==='b'){outputText+='<strong>'}else if(tag==='italic'||tag==='cursive'||tag==='i'){outputText+='<em>'}else if(tag==='underline'||tag==='u'){outputText+='<span style="text-decoration:underline">'}else if(tag==='newline'||tag==='n'){outputText+='<br>'}else if(tag==='tabulator'||tag==='tab'||tag==='t'){outputText+='&nbsp;&nbsp;&nbsp;&nbsp;'}index=tagEnd+2;div.innerHTML=outputText;return}}if(instantMode){const closingIndex=text.indexOf('{{/instant}}',index);if(closingIndex===-1){outputText+=text.substring(index);div.innerHTML=outputText;index=text.length}else{outputText+=text.substring(index,closingIndex);div.innerHTML=outputText;index=closingIndex}}else{outputText+=text.charAt(index);div.innerHTML=outputText;index++}this.outputElement.scrollTop=this.outputElement.scrollHeight},this.config.typingSpeed)}else{this.animationState.currentAnimation=setInterval(()=>{if(index>=text.length){clearInterval(this.animationState.currentAnimation);this.animationState.currentAnimation=null;this.animationState.isAnimating=false;if(callback)callback();this.processOutputQueue();return}if(text.substring(index,index+11)==='{{instant}}'){instantMode=true;index+=11;tagStack.push('instant');return}if(text.substring(index,index+13)==='{{/instant}}'){if(tagStack[tagStack.length-1]==='instant'){tagStack.pop();instantMode=tagStack.includes('instant')}index+=13;return}if(text.charAt(index)==='{'&&text.charAt(index+1)==='{'){const tagEnd=text.indexOf('}}',index);if(tagEnd!==-1){const tag=text.substring(index+2,tagEnd).trim().toLowerCase();if(tag==='font_reset'||tag==='fr'){process.stdout.write(ANSI_STYLES.reset)}else if(tag==='color_reset'){process.stdout.write(ANSI_STYLES.reset)}else if(Utils.isValidColor(tag)){const colorName=tag.replace('#','');if(ANSI_COLORS[colorName]){process.stdout.write(ANSI_COLORS[colorName])}}else if(tag==='bold'||tag==='thick'||tag==='strong'||tag==='b'){process.stdout.write(ANSI_STYLES.bold)}else if(tag==='italic'||tag==='cursive'||tag==='i'){process.stdout.write(ANSI_STYLES.italic)}else if(tag==='underline'||tag==='u'){process.stdout.write(ANSI_STYLES.underline)}else if(tag==='newline'||tag==='n'){process.stdout.write('\n')}else if(tag==='tabulator'||tag==='tab'||tag==='t'){process.stdout.write('\t')}index=tagEnd+2;return}}if(instantMode){const closingIndex=text.indexOf('{{/instant}}',index);if(closingIndex===-1){process.stdout.write(text.substring(index));index=text.length}else{process.stdout.write(text.substring(index,closingIndex));index=closingIndex}}else{process.stdout.write(text.charAt(index));index++}},this.config.typingSpeed)}}printInstantly(text,callback,processQueue=true){const formattedText=this.parseFormatting(text);if(this.env==='browser'){const div=document.createElement('div');div.innerHTML=formattedText;this.outputElement.appendChild(div);this.outputElement.scrollTop=this.outputElement.scrollHeight}else{process.stdout.write(formattedText)}callback&&callback();processQueue&&this.processOutputQueue()}updateLastLine(text){if(this.env==='browser'){const lines=this.outputElement.querySelectorAll('div');if(lines.length>0){const lastLine=lines[lines.length-1];lastLine.innerHTML=this.parseFormatting(text)}else{this.print(text,true)}}else{process.stdout.write('\x1B[1A\x1B[2K');process.stdout.write(this.parseFormatting(text)+'\n')}}printTextLineByLine(text,callback){const lines=text.split('\n');let index=0;const printNextLine=()=>{if(index>=lines.length){callback&&callback()}else{const newLine=this.env=="node"?"\n":"";this.printInstantly(lines[index]+newLine,()=>setTimeout(()=>printNextLine(),this.config.typingSpeed),false)}index++};printNextLine()}animateImage(text,callback){const isAnimation=Array.isArray(text);const firstFrame=isAnimation?text[0]:text;const animationFrames=isAnimation?text:[text];if(this.env==='browser'){const animationId=Utils.uuid();this.printTextLineByLine(firstFrame,()=>{if(!isAnimation){callback&&callback();this.animationState.isAnimating=false;this.processOutputQueue();return}let currentFrame=0;let animationLines=firstFrame.split('\n');const totalLines=animationLines.length;this.animationFrames.set(animationId,{frames:animationFrames,currentFrame:0,totalLines:totalLines,elementIds:[],callback:callback});const outputLines=this.outputElement.querySelectorAll('div');const startIndex=Math.max(0,outputLines.length-totalLines);for(let i=startIndex;i<outputLines.length;i++){outputLines[i].classList.add(`lore-animation-${animationId}`);this.animationFrames.get(animationId).elementIds.push(i)}const animate=()=>{currentFrame=(currentFrame+1)%animationFrames.length;this.updateAnimation(animationId,currentFrame);this.animationFrames.get(animationId).currentFrame=currentFrame};const intervalId=setInterval(animate,200);this.animationIntervals.set(animationId,intervalId);this.animationFrames.get(animationId).callback=callback;this.processOutputQueue()})}else{this.printTextLineByLine(firstFrame,()=>this.processOutputQueue())}}printImageInstantly(text,callback){const isAnimation=Array.isArray(text);const firstFrame=isAnimation?text[0]:text;const newLine=this.env=="node"?"\n":"";this.printInstantly(newLine+firstFrame+newLine,()=>this.processOutputQueue())}updateAnimation(animationId,frameIndex){if(!this.animationFrames.has(animationId))return;const animation=this.animationFrames.get(animationId);const frame=animation.frames[frameIndex];const frameLines=frame.split('\n');const elements=this.outputElement.querySelectorAll(`.lore-animation-${animationId}`);for(let i=0;i<Math.min(elements.length,frameLines.length);i++){elements[i].textContent=frameLines[i]}if(frameLines.length>elements.length){for(let i=elements.length;i<frameLines.length;i++){const newElement=document.createElement('div');newElement.textContent=frameLines[i];newElement.classList.add(`lore-animation-${animationId}`);this.outputElement.appendChild(newElement);animation.elementIds.push(-1)}}for(let i=frameLines.length;i<elements.length;i++){elements[i].textContent=''}}stopAnimation(animationId){if(this.animationIntervals.has(animationId)){clearInterval(this.animationIntervals.get(animationId));this.animationIntervals.delete(animationId)}if(this.animationFrames.has(animationId)){const animation=this.animationFrames.get(animationId);if(animation.callback){animation.callback()}this.animationFrames.delete(animationId)}}skipAnimation(){if(this.animationState.currentAnimation&&this.animationState.isAnimating){clearInterval(this.animationState.currentAnimation);this.animationState.currentAnimation=null;this.animationState.isAnimating=false;while(this.outputQueue.length>0){const animationItem=this.outputQueue.shift();const formattedText=this.parseFormatting(typeof animationItem.text=="string"?animationItem.text:animationItem.text[0]);if(this.env==='browser'){const div=document.createElement('div');div.innerHTML=formattedText;this.outputElement.appendChild(div)}else{process.stdout.write(formattedText)}if(animationItem.callback){animationItem.callback()}}}if(this.animationIntervals.size>0){for(const[animationId,intervalId]of this.animationIntervals.entries()){clearInterval(intervalId);const animation=this.animationFrames.get(animationId);if(animation){const firstFrame=animation.frames[0];if(this.env==='browser'){const elements=this.outputElement.querySelectorAll(`.lore-animation-${animationId}`);const frameLines=firstFrame.split('\n');for(let i=0;i<Math.min(elements.length,frameLines.length);i++){elements[i].textContent=frameLines[i]}for(let i=frameLines.length;i<elements.length;i++){elements[i].remove()}}else{const frameLines=firstFrame.split('\n');process.stdout.write(`\x1B[${animation.totalLines}A`);for(let i=0;i<frameLines.length;i++){process.stdout.write(`\x1B[2K${frameLines[i]}\n`)}for(let i=frameLines.length;i<animation.totalLines;i++){process.stdout.write(`\x1B[2K\n`)}}if(animation.callback){animation.callback()}}}this.animationIntervals.clear();this.animationFrames.clear()}if(this.env==="browser"){this.outputElement.scrollTop=this.outputElement.scrollHeight}this.animationState.isAnimating=false;this.queueIsRunning=false}updatePrompt(newPrompt){if(this.env==="browser"){this.config.prompt=newPrompt;this.promptElement.innerHTML=this.parseFormatting(newPrompt)}else{this.config.prompt=newPrompt;this.rl.setPrompt(this.parseFormatting(newPrompt));this.rl.prompt()}}startGame(startRoomId){this.isRunning=true;this.state.currentRoom=startRoomId;this.look();if(this.env==="node"){this.rl.prompt()}else{this.inputElement.focus()}}restartGame(){this.state={currentRoom:null,inventory:[],flags:{},variables:{},history:[],gameTime:0};this.clearScreen();this.printLine("Game restarted.");if(this.world.rooms.size>0){const firstRoom=Array.from(this.world.rooms.keys())[0];this.startGame(firstRoom)}}move(direction){const currentRoom=this.world.rooms.get(this.state.currentRoom);if(!currentRoom||!currentRoom.exits||!currentRoom.exits[direction]){this.printLine(`You can't go that way.`);return false}const nextRoomId=currentRoom.exits[direction];const nextRoom=this.world.rooms.get(nextRoomId);if(!nextRoom){this.printLine(`The path leads nowhere.`);return false}if(nextRoom.condition&&!nextRoom.condition(this.state)){this.printLine(nextRoom.blockedMessage||`You can't go that way right now.`);return false}this.state.currentRoom=nextRoomId;this.state.gameTime++;if(nextRoom.onEnter){nextRoom.onEnter(this.state,this)}this.look();return true}look(){const room=this.world.rooms.get(this.state.currentRoom);if(!room){this.printLine("You are in the void.");return}this.printLine(room.name);this.printLine("");if(room.image){this.displayImage(room.image,room.imageOptions);this.printLine("")}this.printLine(room.description);this.printLine("");if(room.items&&room.items.length>0){const itemList=room.items .map(id=>{const item=this.world.items.get(id);return item?item.name:"unknown item"}).join(",");this.printLine(`You see:${itemList}`)}if(room.characters&&room.characters.length>0){const charList=room.characters .map(id=>{const character=this.world.characters.get(id);return character?character.name:"unknown character"}).join(",");this.printLine(`You see:${charList}`)}if(room.exits){const exitList=Object.keys(room.exits).join(",");this.printLine(`Exits:${exitList}`)}}stopAnimation(animationId){if(this.animationIntervals.has(animationId)){clearInterval(this.animationIntervals.get(animationId));this.animationIntervals.delete(animationId)}if(this.animationFrames.has(animationId)){this.animationFrames.delete(animationId)}if(this.env==="browser"){const elements=this.outputElement.querySelectorAll(`.lore-animation-${animationId}`);elements.forEach(el=>el.remove())}}stopAllAnimations(){for(const id of this.animationIntervals.keys()){this.stopAnimation(id)}}takeItem(itemId){const room=this.world.rooms.get(this.state.currentRoom);if(!room||!room.items||!room.items.includes(itemId)){this.printLine("You don't see that here.");return false}const item=this.world.items.get(itemId);if(!item){this.printLine("You can't take that.");return false}if(!item.takeable){this.printLine(`You can't take the ${item.name}.`);return false}room.items=room.items.filter(id=>id!==itemId);this.state.inventory.push(itemId);this.printLine(`You take the ${item.name}.`);return true}dropItem(itemId){const itemIndex=this.state.inventory.indexOf(itemId);if(itemIndex===-1){this.printLine("You don't have that item.");return false}const item=this.world.items.get(itemId);if(!item){this.printLine("You can't drop that.");return false}const room=this.world.rooms.get(this.state.currentRoom);if(!room){this.printLine("You can't drop items here.");return false}this.state.inventory.splice(itemIndex,1);if(!room.items)room.items=[];room.items.push(itemId);this.printLine(`You drop the ${item.name}.`);return true}useItem(itemId,targetId=null){const itemIndex=this.state.inventory.indexOf(itemId);if(itemIndex===-1){this.printLine("You don't have that item.");return false}const item=this.world.items.get(itemId);if(!item){this.printLine("You can't use that.");return false}if(!targetId){if(item.use){return item.use(this.state,this)}else{this.printLine(`You can't use the ${item.name}that way.`);return false}}const targetInInventory=this.state.inventory.includes(targetId);const room=this.world.rooms.get(this.state.currentRoom);const targetInRoom=room&&room.items&&room.items.includes(targetId);const targetIsCharacter=room&&room.characters&&room.characters.includes(targetId);if(!targetInInventory&&!targetInRoom&&!targetIsCharacter){this.printLine("You don't see that here.");return false}let target;if(targetIsCharacter){target=this.world.characters.get(targetId)}else{target=this.world.items.get(targetId)}if(!target){this.printLine("You can't use that.");return false}if(item.useOn&&item.useOn[targetId]){return item.useOn[targetId](this.state,this)}if(target.useWith&&target.useWith[itemId]){return target.useWith[itemId](this.state,this)}this.printLine(`Using the ${item.name}on the ${target.name}doesn't seem to do anything.`);return false}async confirm(prompt){if(this.env==='browser'){this.printLine(prompt);this.printLine('1. Yes');this.printLine('2. No');return new Promise((resolve)=>{const handleInput=(input)=>{const choice=input.trim().toLowerCase();if(choice==='1'||choice==='yes'||choice==='y'){resolve(true)}else if(choice==='2'||choice==='no'||choice==='n'){resolve(false)}else{this.updateLastLine('Please enter 1 for Yes or 2 for No:');this.inputElement.addEventListener('keydown',handleInput,{once:true})}};this.updateLastLine('Select option(1-2):');this.inputElement.addEventListener('keydown',handleInput,{once:true})})}else{this.printLine(prompt);this.printLine('1. Yes');this.printLine('2. No');return new Promise((resolve)=>{this.rl.question('Select option(1-2):',(answer)=>{const choice=answer.trim().toLowerCase();if(choice==='1'||choice==='yes'||choice==='y'){resolve(true)}else if(choice==='2'||choice==='no'||choice==='n'){resolve(false)}else{this.printLine('Invalid selection. Please try again.');resolve(this.confirm(prompt))}})})}}async selectFromList(prompt,options){if(this.env==='browser'){this.printLine(prompt);options.forEach((option,index)=>{this.printLine(`${index+1}. ${option}`)});this.printLine(`${options.length+1}. Cancel`);return new Promise((resolve)=>{const handleInput=(input)=>{const choice=parseInt(input.trim(),10);if(!isNaN(choice)&&choice>=1&&choice<=options.length+1){resolve(choice===options.length+1?-1:choice-1)}else{this.updateLastLine(`Please enter a number between 1 and ${options.length+1}:`);this.inputElement.addEventListener('keydown',handleInput,{once:true})}};this.updateLastLine(`Select option(1-${options.length+1}):`);this.inputElement.addEventListener('keydown',handleInput,{once:true})})}else{this.printLine(prompt);options.forEach((option,index)=>{this.printLine(`${index+1}. ${option}`)});this.printLine(`${options.length+1}. Cancel`);return new Promise((resolve)=>{this.rl.question(`Select option(1-${options.length+1}):`,(answer)=>{const choice=parseInt(answer.trim(),10);if(!isNaN(choice)&&choice>=1&&choice<=options.length+1){resolve(choice===options.length+1?-1:choice-1)}else{this.printLine('Invalid selection. Please try again.');resolve(this.selectFromList(prompt,options))}})})}}saveGame(slot="default",silent=false){const saveData={state:{...this.state},timestamp:Date.now(),slot:slot};if(this.env==="browser"){const saves=JSON.parse(localStorage.getItem(STORAGE_KEY)||"{}");saves[slot]=saveData;localStorage.setItem(STORAGE_KEY,JSON.stringify(saves));!silent&&this.printLine(`{{green}}Game saved in slot:${slot}{{color_reset}}`)}else{const saveDir=this.path.join(__dirname,"saves");if(!this.fs.existsSync(saveDir)){this.fs.mkdirSync(saveDir,{recursive:true})}const savePath=this.path.join(saveDir,`save_${slot}.json`);this.fs.writeFileSync(savePath,JSON.stringify(saveData,null,2));!silent&&this.printLine(`{{green}}Game saved in slot:${slot}{{color_reset}}`)}}loadGame(slot="default"){try{let saveData;if(this.env==="browser"){const saves=JSON.parse(localStorage.getItem(STORAGE_KEY)||"{}");saveData=saves[slot]}else{const savePath=this.path.join(__dirname,"saves",`save_${slot}.json`);if(!this.fs.existsSync(savePath)){this.printLine(`No save file found in slot:${slot}`);return false}saveData=JSON.parse(this.fs.readFileSync(savePath,"utf8"))}if(!saveData){this.printLine(`No save file found in slot:${slot}`);return false}this.state=saveData.state;this.printLine(`Game loaded from slot:${slot}`);this.look();return true}catch(error){this.printLine(`Error loading game:${error.message}`);if(this.config.debug){console.error(error)}return false}}deleteSave(slot="default"){try{if(this.env==="browser"){const saves=JSON.parse(localStorage.getItem(STORAGE_KEY)||"{}");if(saves[slot]){delete saves[slot];localStorage.setItem(STORAGE_KEY,JSON.stringify(saves));this.printLine(`Save slot ${slot}deleted.`);return true}}else{const savePath=this.path.join(__dirname,"saves",`save_${slot}.json`);if(this.fs.existsSync(savePath)){this.fs.unlinkSync(savePath);this.printLine(`Save slot ${slot}deleted.`);return true}}this.printLine(`No save file found in slot:${slot}`);return false}catch(error){this.printLine(`Error deleting save:${error.message}`);if(this.config.debug){console.error(error)}return false}}listSaves(){try{let saves={};if(this.env==="browser"){saves=JSON.parse(localStorage.getItem(STORAGE_KEY)||"{}")}else{const saveDir=this.path.join(__dirname,"saves");if(this.fs.existsSync(saveDir)){const files=this.fs.readdirSync(saveDir);files.forEach(file=>{if(file.startsWith("save_")&&file.endsWith(".json")){const slot=file.replace("save_","").replace(".json","");const savePath=this.path.join(saveDir,file);const saveData=JSON.parse(this.fs.readFileSync(savePath,"utf8"));saves[slot]=saveData}})}}if(Object.keys(saves).length===0){this.printLine("No save files found.");return}this.printLine("Available saves:");for(const[slot,data]of Object.entries(saves)){const date=new Date(data.timestamp);this.printLine(`-${slot}:${date.toLocaleString()}`)}}catch(error){this.printLine(`Error listing saves:${error.message}`);if(this.config.debug){console.error(error)}}}addRoom(room){if(!room.id){room.id=Utils.uuid()}this.world.rooms.set(room.id,room);return room.id}addItem(item){if(!item.id){item.id=Utils.uuid()}item.use=Utils.deserializeFunction(item.use);this.world.items.set(item.id,item);return item.id}addCharacter(character){if(!character.id){character.id=Utils.uuid()}this.world.characters.set(character.id,character);return character.id}addEvent(event){if(!event.id){event.id=Utils.uuid()}this.world.events.set(event.id,event);return event.id}async loadPlugin(plugin){try{plugin=await this.prepareModule(plugin);if(plugin.id&&!this.plugins.has(plugin.id)){this.plugins.set(plugin.id,plugin);if(plugin.commands){for(const[name,command]of Object.entries(plugin.commands)){this.registerCommand(name,command)}}if(plugin.rooms){for(const room of plugin.rooms){this.addRoom(room)}}if(plugin.items){for(const item of plugin.items){this.addItem(item)}}if(plugin.characters){for(const character of plugin.characters){this.addCharacter(character)}}if(plugin.events){for(const event of plugin.events){this.addEvent(event)}}if(plugin.keybindings){for(const[key,binding]of Object.entries(plugin.keybindings)){this.registerKeybinding(key,binding)}}this.printLine(`Plugin loaded:${plugin.name||plugin.id}`);return true}else{this.printLine("Invalid plugin format:missing id");return false}}catch(error){this.printLine(`Error loading plugin:${error.message}`);if(this.config.debug){console.error(error)}return false}}unloadPlugin(pluginId){if(this.plugins.has(pluginId)){const plugin=this.plugins.get(pluginId);if(plugin.commands){for(const name of Object.keys(plugin.commands)){this.world.commands.delete(name)}}if(plugin.rooms){for(const room of plugin.rooms){this.world.rooms.delete(room.id)}}if(plugin.items){for(const item of plugin.items){this.world.items.delete(item.id)}}if(plugin.characters){for(const character of plugin.characters){this.world.characters.delete(character.id)}}if(plugin.events){for(const event of plugin.events){this.world.events.delete(event.id)}}if(plugin.keybindings){for(const key of Object.keys(plugin.keybindings)){this.world.keybindings.delete(key)}}this.plugins.delete(pluginId);this.printLine(`Plugin unloaded:${pluginId}`);return true}else{this.printLine(`Plugin not found:${pluginId}`);return false}}async loadTheme(theme){try{theme=await this.prepareModule(theme);this.theme={...DEFAULT_THEME,...theme};if(this.env==="browser"){for(const[property,value]of Object.entries(this.theme)){document.documentElement.style.setProperty(property,value)}this.terminalElement.style.backgroundColor=this.theme["--lore-bg-color"];this.terminalElement.style.color=this.theme["--lore-text-color"];this.terminalElement.style.fontFamily=this.theme["--lore-font-family"];this.terminalElement.style.fontSize=this.theme["--lore-font-size"];this.promptElement.style.color=this.theme["--lore-prompt-color"];this.inputElement.style.color=this.theme["--lore-input-color"];if(this.theme["--lore-prompt-content"]){this.updatePrompt(this.theme["--lore-prompt-content"])}}else{if(this.theme["--lore-prompt-content"]){this.updatePrompt(this.theme["--lore-prompt-content"])}}return true}catch(error){this.printLine(`Error loading theme:${error.message}`);if(this.config.debug){console.error(error)}return false}}async prepareModule(content){if(typeof content==="string"&&Utils.isURL(content)){if(content.endsWith(".js")){try{if(this.env==="browser"){content=await Utils.loadModule(content)}else{content=require(content)}}catch(error){this.printLine(`{{red}}Couldn't prepare module\n${error.message}`);return{}}}else{this.printLine(`{{red}}Module loaded from URL must be a JavaScript(.js)file{{color_reset}}`);return{}}}if(typeof content==="string"){content=JSON.parse(novel)}return content}printHelp(){this.printLine("{{bold}}Available commands:{{font_reset}}");const commands=Array.from(this.world.commands).map(command=>command[1]).sort((a,b)=>a.weight-b.weight).filter(command=>command.help&&command.weight!=-1);commands.forEach(command=>{const name=command.display||command.name;const aliases=command.aliases&&command.aliases.length?","+command.aliases.join(','):"";const help=command.help;this.printLine(`{{green}}${name}{{color_reset}}{{green}}${aliases}{{color_reset}}-${help}`)})}registerCommand(command){if(!command||!command.name)return;this.world.commands.set(command.name.toLowerCase(),{name:"foo",aliases:[],fn:()=>{},help:"",weight:null,...command})}registerKeybinding(key,action){this.world.keybindings.set(key,action)}registerDefaultCommands(){this.registerCommand({name:"help",aliases:["h","?"],fn:()=>this.printHelp(),help:"Show this help",weight:1000});this.registerCommand({name:"look",aliases:["l","see"],fn:()=>this.look(),help:"Look around the current room",weight:1});this.registerCommand({name:"go",display:"go[dir]",fn:(args,engine)=>{if(args.length===0){engine.printLine("Go where?");return}engine.move(args[0])},help:"Move in a direction",weight:2})const directions=["north","south","east","west","northeast","northwest","southeast","southwest","up","down","in","out"];const aliases=["n","s","e","w","ne","nw","se","sw","u","d","i","o"];for(let i=0;i<directions.length;i++){const dir=directions[i];const alias=aliases[i];this.registerCommand({name:dir,aliases:[alias],fn:engine=>engine.move(dir),help:null,weight:-1})}this.registerCommand({name:"take",display:"take[item]",fn:(args,engine)=>{if(args.length===0){engine.printLine("Take what?");return}const room=engine.world.rooms.get(engine.state.currentRoom);if(!room||!room.items){engine.printLine("There's nothing to take here.");return}const itemName=args.join(" ").toLowerCase();let itemId=null;for(const id of room.items){const item=engine.world.items.get(id);if(item&&item.name.toLowerCase().includes(itemName)){itemId=id;break}}if(itemId){engine.takeItem(itemId)}else{engine.printLine("You don't see that here.")}},help:"Take an item",weight:3});this.registerCommand({name:"drop",display:"drop[item]",fn:(args,engine)=>{if(args.length===0){engine.printLine("Drop what?");return}const itemName=args.join(" ").toLowerCase();let itemId=null;for(const id of engine.state.inventory){const item=engine.world.items.get(id);if(item&&item.name.toLowerCase().includes(itemName)){itemId=id;break}}if(itemId){engine.dropItem(itemId)}else{engine.printLine("You don't have that item.")}},help:"Drop an item",weight:4});this.registerCommand({name:"inventory",aliases:["i"],fn:(args,engine)=>{if(engine.state.inventory.length===0){engine.printLine("You are carrying nothing.");return}engine.printLine("{{bold}}You are carrying:{{font_reset}}");for(const itemId of engine.state.inventory){const item=engine.world.items.get(itemId);if(item){engine.printLine(`-${item.name}`)}}},help:"Show your inventory",weight:5});this.registerCommand({name:"use",display:"use[item]",fn:(args,engine)=>{if(args.length===0){engine.printLine("Use what?");return}const onIndex=args.findIndex(arg=>arg==="on");let targetName=null;let itemName;if(onIndex!==-1){itemName=args.slice(0,onIndex).join(" ").toLowerCase();targetName=args .slice(onIndex+1).join(" ").toLowerCase()}else{itemName=args.join(" ").toLowerCase()}let itemId=null;for(const id of engine.state.inventory){const item=engine.world.items.get(id);if(item&&item.name.toLowerCase().includes(itemName)){itemId=id;break}}if(!itemId){engine.printLine("You don't have that item.");return}if(targetName){const room=engine.world.rooms.get(engine.state.currentRoom);let targetId=null;if(room&&room.items){for(const id of room.items){const item=engine.world.items.get(id);if(item&&item.name.toLowerCase().includes(targetName)){targetId=id;break}}}if(!targetId&&room&&room.characters){for(const id of room.characters){const character=engine.world.characters.get(id);if(character&&character.name.toLowerCase().includes(targetName)){targetId=id;break}}}if(!targetId){for(const id of engine.state.inventory){const item=engine.world.items.get(id);if(item&&item.name.toLowerCase().includes(targetName)){targetId=id;break}}}if(targetId){engine.useItem(itemId,targetId)}else{engine.printLine("You don't see that here.")}}else{engine.useItem(itemId)}},help:"Use an item",weight:6});this.registerCommand({name:"say",display:"say[...]",fn:(args,engine)=>{if(args.length===0){engine.printLine("You don't say");return}const line=args.join(" ");engine.printLine(`You say:{{n}}-${line}`)},weight:7,help:"Say something"});this.registerCommand({name:"talk",display:"talk[character]",fn:(args,engine)=>{if(args.length===0){engine.printLine("Talk to whom?");return}const room=engine.world.rooms.get(engine.state.currentRoom);if(!room||!room.characters){engine.printLine("There's no one here to talk to.");return}const charName=args.join(" ").toLowerCase();let characterId=null;for(const id of room.characters){const character=engine.world.characters.get(id);if(character&&character.name.toLowerCase().includes(charName)){characterId=id;break}}if(characterId){const character=engine.world.characters.get(characterId);if(character.talk){character.talk(engine.state,engine)}else{engine.printLine(`${character.name}has nothing to say to you.`)}}else{engine.printLine("You don't see that person here.")}},help:"Talk to someone",weight:8});this.registerCommand({name:"save",display:"save[slot]",fn:(args,engine)=>{const slot=args.length>0?args[0]:"default";engine.saveGame(slot)},help:"Save the game",weight:9});this.registerCommand({name:"load",display:"load[slot]",fn:(args,engine)=>{const slot=args.length>0?args[0]:"default";engine.loadGame(slot)},help:"Load a saved game",weight:10});this.registerCommand({name:"restart",fn:()=>this.restartGame(),help:"Restart the game",weight:11});this.registerCommand({name:"quit",aliases:["exit"],fn:(args,engine)=>{engine.printLine("{{green}}Goodbye!{{color_reset}}");if(engine.env==="node"){engine.rl.close()}else{engine.stopAllAnimations();engine.state={currentRoom:null,inventory:[],flags:{},variables:{},history:[],gameTime:0};engine.clearScreen()}},help:"Quit the game",weight:999})}async loadNovel(novel){try{novel=await this.prepareModule(novel);this.world.rooms.clear();this.world.items.clear();this.world.characters.clear();this.world.events.clear();const commands=new Map(this.world.commands);const keybindings=new Map(this.world.keybindings);this.world.commands=commands;this.world.keybindings=keybindings;if(novel.rooms){for(const room of novel.rooms){this.addRoom(room)}}if(novel.items){for(const item of novel.items){this.addItem(item)}}if(novel.characters){for(const character of novel.characters){this.addCharacter(character)}}if(novel.events){for(const event of novel.events){this.addEvent(event)}}if(novel.startRoom){this.state.currentRoom=novel.startRoom}else{this.state.currentRoom=null}if(this.config.clearScreenOnNovelLoad){this.clearScreen()}this.startGame(this.state.currentRoom);return true}catch(error){this.printLine(`Error loading novel:${error.message}`);if(this.config.debug){console.error(error)}return false}}}return{ANSI_COLORS,ANSI_STYLES,VERSION,STORAGE_KEY,DEFAULT_PROMPT,DEFAULT_THEME,DEFAULT_CONFIG,Game,Utils}});